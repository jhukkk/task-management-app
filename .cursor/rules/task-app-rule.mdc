---
description: 
globs: 
alwaysApply: false
---
## 1. Project Overview

**Goal:** Build a polished, extensible mobile Task Manager in React Native + Expo, showcasing advanced features beyond basic CRUD.

### Do  
- Keep the UI **minimalist** and **accessible**.  
- Structure code for **reuse** (component libraries, shared hooks).  
- Write **self-documenting** TypeScript types and JSDoc comments.

### Don’t  
- Hard-code strings or styles—use centralized config/theme files.  
- Introduce heavy UI libraries—favor lightweight, custom components.  
- Neglect error handling—always surface fallback UIs.

## 2. Starter Template

- **React Native (Expo SDK)** with **TypeScript**  
- **UI Library:** Shadcn UI or React Native Paper for consistent, themed components

### Do  
- Initialize with `expo init --template expo-template-blank-typescript`  
- Add **aliases** (`@/components`, `@/screens`) in `tsconfig.json`  
- Configure **theming** in `/src/theme` (colors, spacing, fonts)

### Don’t  
- Scatter styles inline—centralize in `/src/theme` or styled hooks  
- Mix platform-specific code—use `Platform` checks sparingly  

---

## 3. Core Features

1. **Add Task** (title, short desc)  
2. **Mark Complete / Delete** (swipe or buttons)  
3. **Task List View** (All, Completed, Incomplete)  
4. **Detail View** (full metadata)

### Do  
- Model `Task` interface in `/src/models.ts`  
- Use **React Context** or **Redux Toolkit** for global state  
- Keep components **small** (< 200 LOC)

### Don’t  
- Bypass state immutability—always use reducers or immutable updates  
- Overfetch data—cache tasks locally with Firestore persistence  

---

## 4. Extended (Impressive) Features

- **Projects & Tags:** multi-select badges  
- **Subtasks:** nested checklist  
- **Due Date & Reminders:** Expo Push + local alarms  
- **Search & Advanced Filters:** keyword, date range, priority  
- **Calendar / Agenda Views**  
- **Offline Support:** AsyncStorage + sync queue  
- **Auth & Collaboration:** Firebase Auth + Firestore shared boards  
- **Analytics Dashboard:** charts of completion trends

### Do  
- Abstract feature modules into `/src/services` (e.g., `notificationService.ts`)  
- Leverage Cursor’s live **Type Checking** when wiring up Firestore rules  
- Write **mock tests** for critical service logic early

### Don’t  
- Jam all logic in screens—use custom hooks (`useNotifications`, `useCalendar`)  
- Skip platform permissions—request camera/storage at runtime  

---

## 5. State Management & Architecture

- **Global State:** Redux Toolkit slices or React Context + useReducer  
- **Data Layer:** Custom hooks in `/src/hooks` calling Firestore/AsyncStorage  
- **Networking:** Axios (for any REST), `@react-native-firebase/firestore`  
- **Offline Queue:** Persist writes locally, flush on reconnect

### Do  
- Keep slice logic DRY—use `createEntityAdapter` for task lists  
- Type all actions and selectors in TypeScript  
- Use Cursor’s **Refactor** tools to safely rename types and functions

### Don’t  
- Mix UI and business logic—screens only orchestrate hooks and dispatches  
- Ignore platform quirks—test on both iOS and Android simulators  

---